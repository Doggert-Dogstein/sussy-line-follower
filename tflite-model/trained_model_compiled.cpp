/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 31.01.2022 09:26:29

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 9040;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteEvalTensor tflEvalTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,3960 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0035998774692416191, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 400, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(16) int32_t tensor_data2[8] = { 3400, -1348, 560, 2430, -109, -565, 2653, -804, };
const TfArray<1, int> tensor_dimension2 = { 1, { 8 } };
const TfArray<8, float> quant2_scale = { 8, { 1.2335088285908569e-05, 1.7993448636843823e-05, 1.421243814547779e-05, 1.433333454770036e-05, 2.5260014808736742e-05, 1.4497172742267139e-05, 1.711677759885788e-05, 1.7180049326270819e-05, } };
const TfArray<8, int> quant2_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[16] = { 2275, -30, -228, -653, -1666, 1468, 566, 714, -403, -933, -1665, 947, -721, -431, 1048, 4040, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 5.5321310355793685e-05, 5.009784217691049e-05, 4.6653083700221032e-05, 5.7089266192633659e-05, 4.5435070205712691e-05, 5.2916402637492865e-05, 6.1529914091806859e-05, 6.6416730987839401e-05, 5.5168922699522227e-05, 5.0241553253727034e-05, 9.7268595709465444e-05, 5.2090555982431397e-05, 8.09825723990798e-05, 6.9685942435171455e-05, 4.8847101425053552e-05, 5.2367788157425821e-05, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[4] = { -1139, -1653, 3781, -1569, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const TfArray<1, float> quant4_scale = { 1, { 9.2503665655385703e-05, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[4*400] = { 
  -49, 27, -18, 2, -17, -35, 6, -27, -28, 34, 3, -39, 19, -17, 31, 8, -40, 26, -12, 13, -53, -49, 11, -14, -36, 41, 45, -52, 25, -2, 23, -7, -37, 40, 10, 1, -47, -37, 8, -48, -57, 26, 7, -1, 38, -83, 2, 3, -45, 45, 11, 12, -31, -22, -5, -34, -20, 19, 20, -33, 44, -67, 19, 13, -54, 27, 5, -1, -18, -16, 14, -11, -47, 46, 22, -46, 33, 16, 18, 14, -41, 34, -19, -30, -68, -34, 3, -25, -46, 16, 10, -18, 22, -66, -5, -10, -65, 18, -11, -5, -16, -62, -5, -38, 4, 41, 31, -39, 12, -27, -2, -2, -26, 31, 2, -16, -35, -42, -16, -26, -27, 9, 24, -15, 16, -59, -3, 6, -10, 4, -26, 0, -40, -52, -23, -11, -15, -16, 8, -16, 13, -36, -5, -15, -60, 26, -25, -24, -60, -13, -6, -34, -59, -1, 9, -45, 13, -45, 29, -31, -70, 13, -33, -20, -45, -27, 3, -37, -46, 21, 11, -58, 22, -51, 11, -8, -46, 22, -12, -31, -41, -12, -9, -37, -19, 25, 19, -37, 22, -38, 10, 7, -30, 28, 1, -10, -33, -6, 14, -23, -2, 29, 77, -11, 32, -44, 23, -3, -29, 9, 9, -13, -42, -25, 18, -21, 1, 24, 54, -31, 28, -52, -5, -35, -22, 22, -57, -23, -50, -64, 10, -40, -23, 35, 52, 17, 47, -10, -18, -18, -41, 34, -34, -39, -15, -43, 4, -58, -18, 13, 15, -56, 11, -39, 15, -13, -42, 37, -51, -19, -45, -47, -1, -50, -61, 15, 6, -35, 18, -22, 21, -29, -68, 9, -28, -34, -21, -51, 26, -59, -58, 29, 69, -55, 45, -60, 23, 19, -52, 13, -6, -29, -37, -83, 30, -63, -16, 1, 38, -14, 50, -53, 21, 2, -25, 19, 1, -14, -32, -61, -6, -55, -29, 17, 39, -24, 8, -26, 13, -7, -18, 6, 23, -7, -12, -55, -15, -24, -19, -20, 20, -1, 16, -46, -2, 3, -5, -1, -19, 4, -38, -22, 17, -41, -29, 26, 26, -22, 28, -104, 7, 4, -24, 24, -25, -7, -19, -39, 24, -52, -50, 28, 48, -2, 42, -93, 2, 32, -40, 37, -24, 8, -37, -52, 33, -35, -29, 45, 48, -19, 64, -116, 4, -5, -65, 40, 16, 19, 38, -41, 28, -22, -12, 22, 74, -25, 55, -36, 6, 27, 
  23, 13, 33, 44, 1, 61, 52, 37, 31, 34, -25, 2, -25, 3, 22, 8, -2, 13, 33, 20, 10, 43, 22, 41, 41, 7, -51, -20, -3, -52, 24, -1, -4, -25, 30, 35, 0, 37, 13, 29, -8, 29, -49, -20, -57, -24, 26, -11, -9, 21, -8, 18, 20, 8, -8, 51, -28, 21, -15, -20, -7, -30, 11, -17, -12, -6, 22, 11, -5, 33, 3, 13, 45, -5, -5, -12, -1, -72, 17, -15, -21, -7, -4, 17, -19, 29, -23, 17, -19, -5, -74, -12, -60, -34, 2, -24, 4, -44, -5, -11, -10, 0, 24, 12, 0, -5, -52, -17, -49, -72, 19, -28, -15, 24, 1, -1, 2, 8, 13, 0, -50, 32, -78, -50, 11, -50, 17, -11, -7, 37, 48, 21, -6, 2, 41, 24, -11, 2, -70, -26, -39, -28, 20, -1, -14, -17, -1, 5, -2, 46, 30, 56, -26, 2, -54, -18, -19, -10, 13, -31, -12, 4, 1, -3, -22, 0, 10, 15, -6, 7, -81, -31, -41, -8, 5, -29, -10, -1, -10, 7, -7, 14, 12, 27, 3, -3, -44, -20, -33, -20, 3, -3, -30, -22, 14, -1, -4, -7, 1, 23, -14, 4, -69, -41, -25, -68, -8, 0, -21, -2, 0, -13, -19, 8, 2, -7, -44, -4, -82, -32, -41, -17, 0, -30, -17, -12, -12, -8, 2, -8, 33, 29, 26, 20, -17, -31, -37, 17, 1, -35, -16, 13, -25, -4, -22, -26, 22, 21, 1, 10, -59, -22, -49, 9, 8, -18, 6, -18, -23, 9, -1, 8, -10, 23, 30, -12, -56, -4, -54, 60, -5, -33, 5, -13, -35, 10, 15, 9, -2, 14, -6, -12, -62, -17, -62, 74, -12, -1, -10, 5, 9, -19, -31, 6, 18, 15, -5, -9, -4, -36, -17, 4, 7, -19, -9, 13, 22, -18, 9, -29, -1, 9, -4, 26, 48, -35, -10, -38, 1, -15, -22, -11, -2, 14, 0, 26, 1, 14, -10, 2, -4, -15, 17, -103, 6, -13, -19, -17, -12, 10, 12, -2, 10, 11, -15, -16, -48, -41, -4, -71, 20, 5, -17, 3, 43, 24, 6, 19, 15, 48, 13, 33, -64, -31, -36, -94, 23, -26, -16, 21, 40, 28, 29, 22, 27, 44, 38, 22, -34, -43, 1, -53, 39, -28, -58, 16, 42, 53, 11, 49, 41, 89, 54, 16, -19, -18, -15, 47, 24, -34, 
  22, -47, 40, 52, 28, 37, -5, 13, 61, -40, -8, 36, -51, -64, 0, 25, 35, -43, -60, -8, -13, 0, -40, -5, 3, -29, -12, 42, -48, 75, -47, 56, 24, -53, -57, 16, 4, -34, -35, -13, 28, -32, 50, 29, 12, 38, -25, 48, 51, -31, -2, 6, 9, 17, -46, -17, 62, -47, -21, 26, 12, -15, -24, 43, 12, -4, -43, 16, -4, -7, 2, -20, -3, -24, -28, 32, 2, 47, 11, 29, 36, -13, 23, 20, -36, -5, -16, -29, 2, -1, -6, 15, 5, -27, 29, 31, -6, -9, 3, -11, -9, -1, -33, 0, -35, 0, -40, 0, 10, -53, 7, 35, -7, -25, 50, -3, 9, -1, -14, 30, -6, -39, -19, -19, -11, -59, -1, -6, 5, -25, -13, -21, 3, -18, -27, -1, -15, -29, 32, 5, -3, -21, -22, 9, 14, 24, -23, 2, 19, 2, -37, -3, 12, -51, -41, -11, -47, -1, -1, 14, 44, -19, -10, 12, 3, 6, -10, -7, 19, -33, -9, 30, -39, 22, -32, 9, 44, -31, -31, 2, 9, 7, -38, -8, 14, -41, -27, 11, -22, 11, -37, 39, 21, -31, -11, 2, 8, 8, -15, -5, 32, -11, -43, 17, -15, -40, -18, 22, 21, -92, -30, 21, -2, -12, -13, 3, 18, -53, -28, 39, -3, 7, -37, 37, 4, -62, -14, -6, -25, 16, -15, 3, -18, -31, -47, -6, -30, -38, -11, 26, 11, -36, -10, -12, -17, -19, -20, -22, -48, -32, -32, -28, -12, -16, 19, -1, 20, -4, -16, 1, -18, -25, -16, -11, -29, -36, -68, -10, -20, -12, -21, 28, 25, -31, -22, -6, 16, -12, -5, -8, 2, -4, -6, 27, -3, 74, -7, 13, 22, -48, 22, -2, 21, -24, -31, -6, 14, -23, -7, 20, 25, 10, -41, 15, 14, -61, -35, -6, -35, 35, -17, -25, -26, -40, -34, -1, -8, -75, 11, 25, -21, -50, -17, -20, -14, -17, -53, -42, -20, -63, -45, -14, 8, -63, -7, 26, 1, -30, 8, -16, 6, -2, -31, -19, -16, -27, -18, 5, 23, -5, -27, 25, 23, -27, 13, -5, 0, 12, -58, -3, 2, -25, -21, 14, 34, 44, -26, 44, 20, -8, 12, 15, 26, 0, -21, 4, 3, -69, 1, 57, 0, 26, -30, 31, 54, -13, 29, 31, 36, 32, -1, 4, 43, -16, -15, 48, 24, 45, -30, 43, 
  -44, -14, -58, -72, -14, -77, -96, -69, -83, -39, 2, -38, 4, 37, -95, -18, -17, -27, 15, -32, 26, 11, -54, -25, -13, -24, 12, 0, 2, -39, -68, -49, 2, -21, -6, -30, -21, 14, -14, -21, -17, -47, -43, -28, -42, -3, -35, -38, 1, -13, -4, -15, 5, -12, 5, -3, -60, -31, -16, 6, -45, 68, -60, -38, 14, 9, 28, -22, 33, 6, -8, 18, -16, 10, 29, -24, -11, 12, -66, -52, 11, 20, -3, 9, 32, 3, 15, 36, 47, -2, 1, 10, 27, 54, -19, -14, 29, 2, 8, 16, 22, 43, 24, 35, 32, -27, 22, 25, 0, 77, -16, -24, 29, -5, -10, 8, 27, 6, -7, 10, 42, 12, 29, 38, 12, 63, -17, 9, 23, 14, 23, 9, 19, 10, -11, 1, 26, -10, -4, 20, -2, 36, -29, -3, 17, -10, 1, 5, 0, 1, -19, 9, 12, 11, 51, 22, 35, 19, -9, 12, 19, -18, 32, 0, -3, -15, 25, -6, -19, -2, 49, 12, 24, 33, -21, 6, 17, -3, 39, 2, 10, 11, 12, 7, -40, -11, 29, 7, 14, 21, -4, -5, 10, 45, 29, 0, 10, 23, 39, 31, 21, 9, 22, 8, 12, 54, 14, -12, 8, 50, 21, 16, 5, 11, 20, -14, -4, 33, 18, 27, 4, -10, -4, -10, 18, 11, 75, 18, 22, 2, 16, 24, 6, -6, 29, 19, 4, 12, 11, 8, 39, -14, 42, 26, 35, 13, 10, 36, 7, 0, 69, 30, 7, 42, -22, 22, 11, 0, 56, 41, 16, 29, -13, 43, 28, 26, 109, 20, 70, -51, 21, 28, 19, -23, 36, 1, 9, 26, -20, 17, -17, -51, -34, 14, 6, -65, 16, -6, 8, 45, 30, -1, 37, 10, 11, 25, 18, -10, -21, 5, -25, 3, 44, -4, 37, 30, 33, 8, 14, 7, 54, 17, 22, 49, -37, 1, -60, 81, -37, -22, 4, 57, 3, 16, 13, 4, 73, 47, 10, 14, 24, -1, -31, 127, -18, -14, 29, 10, -16, -11, 4, -2, 27, -9, 25, -8, -5, 12, -68, 69, -35, -45, -4, -13, -30, -13, -17, -15, 20, -22, -22, -11, -35, 1, -87, 71, -42, -67, -9, -88, -23, -67, -39, -17, -37, -38, -39, -74, -23, -17, -85, 39, -80, -41, -23, -107, -85, -64, -83, -66, -61, -70, -99, -119, -56, -53, -87, -69, -91, -45, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 4,400 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0059575112536549568, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[8*1*3*40] = { 
  /* [0][0][][] */ -106,22,-40,38,45,-61,36,49,127,37,61,62,11,9,-110,-111,-46,-55,-52,-73,-62,77,51,72,74,92,-24,49,72,12,-56,2,-68,-21,43,51,-45,-41,8,-60, 38,17,48,-22,0,14,35,-57,93,64,127,4,-19,-67,-92,-19,-51,-76,-2,-48,-35,36,85,32,19,-21,3,34,94,69,-27,53,28,-2,-25,-2,9,10,-21,-14, -44,-39,-18,28,45,-23,37,11,58,37,39,-2,-1,-20,-84,-38,-81,-105,-48,0,28,74,65,1,19,63,-9,1,40,77,-59,-29,-6,-7,-44,11,63,28,48,-28, 
  /* [1][0][][] */ -52,-95,-111,-97,-64,-73,-85,-127,-37,2,-17,-85,-30,52,-2,3,25,91,105,5,-54,-5,-13,-27,46,30,-1,-35,-50,9,-21,-23,-13,-32,-5,-41,-4,-9,21,15, -18,-35,-44,-5,-40,-11,-24,-78,3,32,-4,-8,-89,-4,-7,-45,39,111,78,9,0,10,48,32,63,27,-13,-65,-37,-7,-27,37,13,5,-2,17,-39,24,53,47, -94,-94,-86,-28,-45,-84,-88,-118,-21,13,-19,-39,-22,55,-15,16,35,58,72,-16,-37,-48,-10,25,24,25,16,-72,-3,-33,-43,13,24,18,16,-6,23,23,43,5, 
  /* [2][0][][] */ -19,-26,-20,10,-87,-85,-50,40,-90,-64,-40,37,34,47,55,48,56,96,54,81,-37,-16,-32,7,-59,-73,-58,-104,-106,-43,-20,17,48,-40,-22,-6,-11,-4,30,-10, -8,-6,6,-1,-48,12,5,-21,-74,-57,7,-14,31,33,88,53,80,85,46,71,-21,-38,-25,-18,-14,-32,-83,-18,-62,-35,22,36,27,-10,6,-53,54,51,10,12, 12,-18,71,-8,30,-22,63,40,-61,-69,-8,12,30,92,71,66,15,127,70,63,50,-21,-9,-11,-60,-35,-10,-44,-88,-67,12,43,76,13,14,21,16,-21,66,-42, 
  /* [3][0][][] */ 0,127,70,28,27,-20,55,92,-2,53,49,49,65,62,66,50,36,9,-38,-6,26,94,68,-20,38,22,2,-21,-27,38,21,39,36,-7,-14,17,-41,29,-21,-84, 21,75,79,-60,15,69,92,68,-46,64,-22,60,24,-49,-18,115,7,50,-22,-12,3,74,41,-36,-43,-10,-39,-19,-5,15,37,-14,-27,31,-18,5,-61,-74,2,-107, 30,24,109,-74,-18,-11,86,66,-15,-6,22,38,34,-26,21,-7,34,21,-9,46,6,-1,-32,-46,-66,-33,-88,3,-69,-22,-52,-39,-20,20,-18,16,-89,-48,-12,-35, 
  /* [4][0][][] */ -66,-7,-38,42,55,8,-15,-17,0,-40,-36,34,-68,10,-93,-59,-14,-7,-1,-36,-44,-48,-7,-35,46,33,3,-77,-61,-61,11,2,46,-40,7,-66,-1,47,3,-12, -84,29,5,-9,10,4,-40,-31,22,-43,-35,-28,-69,-18,-127,-55,-1,-27,-46,-35,-38,-86,-34,4,42,43,-8,-57,-66,-41,21,13,-17,-48,56,-33,-9,-18,33,-25, 11,21,55,63,69,74,28,41,86,47,56,54,35,55,-59,-37,-12,-6,-5,-1,-9,-26,21,-10,98,45,31,-21,-28,-42,-20,2,42,-18,40,4,14,43,50,7, 
  /* [5][0][][] */ 29,39,45,-6,-13,-17,36,31,-22,-72,-30,14,77,-10,28,81,11,2,-83,53,29,19,-29,-79,-60,-94,7,-20,-41,31,96,41,21,40,-1,57,18,-13,-33,-8, -98,-48,-61,6,-46,-3,54,63,-91,-15,-79,-41,-2,-49,27,58,-12,-79,-26,-7,-5,-50,-109,-117,-64,-61,-6,18,-51,60,73,55,60,68,42,42,-36,56,12,16, -14,16,-7,-51,-3,-10,65,74,-14,-78,-37,38,60,29,49,127,19,-62,-11,33,27,-1,-54,-98,-27,-20,-12,-1,9,43,26,-12,8,1,64,-29,-14,10,-12,44, 
  /* [6][0][][] */ 25,25,8,-28,-2,-9,47,23,39,68,15,25,-37,-32,-53,-60,-28,-72,42,-49,-80,-51,-48,24,-80,-47,-4,-28,22,-44,-85,-72,-37,9,-26,27,11,-49,-12,50, 38,30,43,22,-11,43,3,-20,59,32,48,-6,-41,-39,-127,-24,-45,-37,4,50,-68,-20,22,25,-87,-27,-4,-54,-9,-24,-38,-56,-47,-51,-5,25,26,22,24,44, 52,101,88,26,31,47,84,63,101,71,54,13,-14,-27,-93,-43,-50,-77,29,25,-22,-33,-14,16,-67,-54,66,-15,24,-35,-47,-37,-1,34,44,52,61,-10,59,51, 
  /* [7][0][][] */ -76,-18,-3,4,0,-53,5,36,57,93,38,29,61,16,-41,33,-17,-6,0,-64,38,47,66,58,39,34,-3,-8,93,85,-8,-7,5,-33,0,-7,50,-23,21,-5, -78,-29,-34,-10,-74,-37,32,31,89,54,47,30,-26,-61,-18,-62,4,-48,-26,-69,-21,32,45,-16,15,20,31,-4,53,68,20,-1,-17,8,-43,-25,-36,15,4,-60, -127,-69,-66,-53,-15,-36,45,49,-9,35,-12,-13,-35,-61,-74,5,-18,-57,-55,-65,-18,58,-12,-16,-28,21,37,27,-18,35,-29,-28,-53,-26,-11,19,-49,-49,-19,-9, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,3,40 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0034265299327671528, 0.004998350515961647, 0.0039480337873101234, 0.0039816172793507576, 0.0070169097743928432, 0.0040271296165883541, 0.0047548222355544567, 0.0047723981551826, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[16*1*3*8] = { 
  /* [0][0][][] */ -19,-36,-45,75,-72,-59,82,18, 88,-28,-79,12,-127,-61,39,13, 58,-52,14,39,-71,38,96,37, 
  /* [1][0][][] */ -69,112,9,-53,21,-13,-30,-33, -86,-10,38,-13,-14,42,-43,-50, -15,116,83,68,127,16,-71,-24, 
  /* [2][0][][] */ -20,-12,-73,-42,37,125,-118,-61, 80,-53,-23,95,-25,-22,-72,83, 1,-127,-41,-7,-39,41,-58,20, 
  /* [3][0][][] */ -6,5,27,0,-127,64,-32,84, 6,-40,31,67,-37,72,46,18, 18,-83,17,14,-83,63,33,-13, 
  /* [4][0][][] */ 10,-11,72,-19,10,-23,-80,61, 8,-53,22,3,-69,-35,1,87, 90,-105,71,94,-127,74,-63,105, 
  /* [5][0][][] */ 36,-71,-30,50,-125,94,-6,90, -34,-81,-29,52,-127,66,-62,-19, -19,-38,51,-1,-120,5,-54,35, 
  /* [6][0][][] */ 14,31,127,66,-36,-3,-32,10, -32,2,91,-16,-58,47,-50,-69, -62,41,72,-14,25,-48,-18,-50, 
  /* [7][0][][] */ -31,-55,69,6,-127,70,-48,8, 24,-80,3,38,-41,42,-51,-40, -48,-75,-6,21,-76,30,-71,35, 
  /* [8][0][][] */ -26,-55,111,-13,-85,-18,7,61, 8,-50,-13,124,-8,30,41,91, 2,-99,39,-43,-127,-50,65,61, 
  /* [9][0][][] */ -64,-43,44,-11,68,68,-101,-51, -33,113,127,-12,85,41,41,-62, -83,26,103,40,54,20,5,30, 
  /* [10][0][][] */ -47,30,34,-53,75,-21,-19,11, 20,45,17,-22,127,13,67,-39, -9,28,-5,-25,61,-1,54,-27, 
  /* [11][0][][] */ 52,-39,-66,52,-99,-46,42,45, 17,12,-21,-33,-116,-26,33,127, 69,-20,-118,39,18,-40,125,32, 
  /* [12][0][][] */ 12,34,-32,-38,115,39,66,-3, -9,21,45,-40,127,-9,61,61, -7,51,-7,-31,61,37,26,59, 
  /* [13][0][][] */ -98,-7,75,45,-72,-99,-27,-109, -100,-26,105,-11,109,-77,-77,-127, -53,-8,12,31,42,-90,41,-76, 
  /* [14][0][][] */ -7,44,115,-1,-79,127,-79,-43, 1,57,-1,-13,-12,31,-85,18, -39,81,101,-58,29,86,-74,10, 
  /* [15][0][][] */ 56,67,-39,7,-117,-26,-17,37, -41,57,-22,-90,-21,37,127,45, 28,-12,18,-84,-89,30,-7,62, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant7_scale = { 16, { 0.0046584540978074074, 0.0042186002247035503, 0.0039285267703235149, 0.0048073288053274155, 0.0038259611465036869, 0.0044559435918927193, 0.0051812632009387016, 0.0055927685461938381, 0.004645621869713068, 0.0042307018302381039, 0.0081907184794545174, 0.0043864012695848942, 0.0068193175829946995, 0.0058680595830082893, 0.0041132788173854351, 0.0044097462669014931, } };
const TfArray<16, int> quant7_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[4] = { 1, 1, 99, 40, };
const TfArray<1, int> tensor_dimension8 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data9[4] = { 1, 99, 1, 8, };
const TfArray<1, int> tensor_dimension9 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data10[4] = { 1, 1, 50, 8, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data11[4] = { 1, 50, 1, 16, };
const TfArray<1, int> tensor_dimension11 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,99,40 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0035998774692416191, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,99,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.011875465512275696, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,99,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.011875465512275696, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,50,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.011875465512275696, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,50,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.011875465512275696, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,50,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.015527232550084591, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,50,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.015527232550084591, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.015527232550084591, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,400 } };
const TfArray<1, float> quant20_scale = { 1, { 0.015527232550084591, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,4 } };
const TfArray<1, float> quant21_scale = { 1, { 0.21332502365112305, } };
const TfArray<1, int> quant21_zero = { 1, { 19 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,4 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,8 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,2 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,9 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,10 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,7,3 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,11 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,1 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,5,4 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension0, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension13, 792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension15, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension17, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension19, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension21, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for(size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
